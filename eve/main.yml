version: '0.2'
branches:
  user/*, feature/*, improvement/*, bugfix/*, w/*, q/*, hotfix/*, dependabot/*, documentation/*, release/*:
    stage: pre-merge
stages:
  pre-merge:
    worker:
      type: local
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED'
        command: mkdir -p build_status/build_status && echo 'FAILED' > build_status/build_status/final_status
        haltOnFailure: true
    - TriggerStages:
        name: Trigger build, docs, and lint stages
        stage_names:
        - build
        - docs
        - lint
    - SetPropertyFromCommand:
        name: Set version as property from built artifacts
        property: metalk8s_version
        command: bash -c '. <(curl -s "%(prop:artifacts_private_url)s") && echo $VERSION'
    - TriggerStages:
        name: Trigger single-node and multiple-nodes steps with built ISO
        stage_names:
        - single-node
        - multiple-nodes
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL'
        command: mkdir -p build_status/build_status && echo 'SUCCESSFUL' > build_status/build_status/final_status
        haltOnFailure: true
    - Upload:
        name: Upload final status to artifacts
        source: &id001 build_status
        alwaysRun: true
  build:
    worker:
      type: kube_pod
      path: eve/workers/pod-builder/pod.yaml
      images:
        docker-builder: eve/workers/pod-builder
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for build
        command: mkdir -p build_status/build_status/build && echo 'FAILED' > build_status/build_status/build/final_status
        haltOnFailure: true
    - ShellCommand:
        name: Wait for Docker daemon to be ready
        command: bash -c 'for i in {1..150}; do docker info &> /dev/null && exit;
          sleep 2; done; echo "Could not reach Docker daemon from Buildbot worker"
          >&2; exit 1'
        haltOnFailure: true
    - Git:
        name: git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
    - ShellCommand:
        name: Build everything
        command: ./doit.sh -n 4
        haltOnFailure: true
        env:
          PYTHON_SYS: python3.6
        usePTY: true
    - ShellCommand:
        name: Copy artifacts
        command: mkdir -p artifacts; for artifact in build.log _build/metalk8s.iso
          _build/SHA256SUM _build/root/product.txt; do cp -r "$artifact" artifacts;
          done
    - Upload:
        name: Upload artifacts
        source: &id002 artifacts
        urls:
        - metalk8s.iso
        - SHA256SUM
        - product.txt
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for build
        command: mkdir -p build_status/build_status/build && echo 'SUCCESSFUL' > build_status/build_status/build/final_status
        haltOnFailure: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
        alwaysRun: true
  docs:
    worker:
      type: kube_pod
      path: eve/workers/pod-docs-builder/pod.yaml
      images:
        doc-builder:
          context: .
          dockerfile: docs/Dockerfile
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for docs
        command: mkdir -p build_status/build_status/docs && echo 'FAILED' > build_status/build_status/docs/final_status
        haltOnFailure: true
    - Git:
        name: git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
    - ShellCommand:
        name: Build documentation
        command: tox --workdir /tmp/tox -e docs -- html latexpdf
        haltOnFailure: true
        env:
          READTHEDOCS: 'True'
    - ShellCommand:
        name: Copy artifacts for 'docs'
        command: mkdir -p artifacts/docs; for artifact in docs/_build/* CHANGELOG.md;
          do cp -r "$artifact" artifacts/docs; done
    - Upload:
        name: Upload artifacts
        source: *id002
        urls:
        - docs/html/index.html
        - docs/latex/MetalK8s.pdf
        - docs/CHANGELOG.md
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for docs
        command: mkdir -p build_status/build_status/docs && echo 'SUCCESSFUL' > build_status/build_status/docs/final_status
        haltOnFailure: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
        alwaysRun: true
  lint:
    worker:
      type: kube_pod
      path: eve/workers/pod-linter/pod.yaml
      images:
        docker-linter: eve/workers/pod-linter
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for lint
        command: mkdir -p build_status/build_status/lint && echo 'FAILED' > build_status/build_status/lint/final_status
        haltOnFailure: true
    - Git:
        name: git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
    - ShellCommand:
        name: Run all linting targets
        command: ./doit.sh lint
        haltOnFailure: false
        usePTY: true
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for lint
        command: mkdir -p build_status/build_status/lint && echo 'SUCCESSFUL' > build_status/build_status/lint/final_status
        haltOnFailure: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
        alwaysRun: true
  single-node:
    worker:
      type: openstack
      path: eve/workers/openstack-single-node
      image: CentOS-7-x86_64-GenericCloud-1809.qcow2
      flavor: m1.large
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for single-node
        command: mkdir -p build_status/build_status/single-node && echo 'FAILED' >
          build_status/build_status/single-node/final_status
        haltOnFailure: true
    - Git:
        name: git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
    - ShellCommand:
        name: Install SSH keys and report connection info
        command: "mkdir -p ~/.ssh; echo \"%(secret:ssh_pub_keys)s\" >> ~/.ssh/authorized_keys;\
          \ IP=$( ip -f inet addr show eth0 | sed -En 's/^.*inet ([0-9.]+).*$/\\1/p'\
          \ ); echo \"Connect to this worker using:\n    ssh eve@$IP\""
    - ShellCommand:
        name: Retrieve ISO image checksum
        command: curl -s -XGET -o "SHA256SUM" "%(prop:artifacts_private_url)s/SHA256SUM"
    - ShellCommand:
        name: Retrieve ISO image
        command: bash -c 'for i in {1..20}; do echo "Attempt $i out of 20"; curl -s
          -XGET -o "metalk8s.iso" "%(prop:artifacts_private_url)s/metalk8s.iso" &&
          exit; sleep 2; done; echo "Could not retrieve ISO after 20 attempts" >&2;
          exit 1'
        haltOnFailure: true
    - ShellCommand:
        name: Check ISO image with checksum
        command: sha256sum -c SHA256SUM
        workdir: .
    - ShellCommand:
        name: Create ISO mountpoint
        command: sudo mkdir -p "/srv/scality/metalk8s-%(prop:metalk8s_version)s"
        haltOnFailure: true
    - ShellCommand:
        name: Mount ISO image
        command: sudo mount -o loop "metalk8s.iso" "/srv/scality/metalk8s-%(prop:metalk8s_version)s"
        haltOnFailure: true
    - ShellCommand:
        name: Create bootstrap configuration file
        command: "sudo bash -c 'mkdir -p /etc/metalk8s; cat > /etc/metalk8s/bootstrap.yaml\
          \ << END\napiVersion: metalk8s.scality.com/v1alpha2\nkind: BootstrapConfiguration\n\
          networks:\n  controlPlane: 10.100.0.0/16\n  workloadPlane: 10.100.0.0/16\n\
          ca:\n  minion: $(hostname)\napiServer:\nhost: $(ip route get 10.100.0.0\
          \ | awk '/10.100.0.0/{ print $6 }')\narchives:\n- \"$(relpath 'metalk8s.iso')\"\
          \nEND'"
        haltOnFailure: true
    - ShellCommand:
        name: Start the bootstrap process
        command: sudo bash /srv/scality/metalk8s-%(prop:metalk8s_version)s/bootstrap.sh
          --verbose
        haltOnFailure: true
    - ShellCommand:
        name: Provision Prometheus and AlertManager storage
        command: sudo bash env PRODUCT_TXT=/srv/scality/metalk8s-%(prop:metalk8s_version)s/product.txt
          PRODUCT_MOUNT=/srv/scality/metalk8s-%(prop:metalk8s_version)s eve/create-volumes.sh
        haltOnFailure: true
    - ShellCommand:
        name: Run fast tests locally
        command: git checkout "$BRANCH" --quiet && tox -e tests-local -- -m "post
          and ci and not multinode and not slow"
        haltOnFailure: true
        env:
          BRANCH: '%(prop:branch)s'
          ISO_MOUNTPOINT: &id003 /srv/scality/metalk8s-%(prop:metalk8s_version)s
    - ShellCommand:
        name: Run slow tests locally
        command: git checkout "$BRANCH" --quiet && tox -e tests-local -- -m "post
          and ci and not multinode and slow"
        haltOnFailure: true
        env:
          BRANCH: '%(prop:branch)s'
          ISO_MOUNTPOINT: *id003
    - ShellCommand:
        name: Run Cypress tests
        command: bash cypress.sh
        haltOnFailure: true
        env:
          IN_CI: 'True'
        workdir: build/ui
    - ShellCommand:
        name: Copy artifacts for 'ui/cypress'
        command: mkdir -p artifacts/ui/cypress; for artifact in ui/cypress/screenshots
          ui/cypress/videos; do cp -r "$artifact" artifacts/ui/cypress; done
    - ShellCommand:
        name: Copy artifacts for 'ui'
        command: mkdir -p artifacts/ui; for artifact in ui/junit; do cp -r "$artifact"
          artifacts/ui; done
    - ShellCommand:
        name: Collect logs using sosreport
        command: sudo sosreport --all-logs -o metalk8s -kmetalk8s.podlogs=True -o
          containerd -kcontainerd.all=True -kcontainerd.logs=True --batch --tmp-dir
          /var/tmp && sudo chown eve:eve /var/tmp/sosreport*
    - ShellCommand:
        name: Copy artifacts for 'sosreport/single-node'
        command: mkdir -p artifacts/sosreport/single-node; for artifact in /var/tmp/sosreport*;
          do cp -r "$artifact" artifacts/sosreport/single-node; done
    - Upload:
        name: Upload artifacts
        source: *id002
        urls:
        - sosreport/single-node-downgrade-centos
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for single-node
        command: mkdir -p build_status/build_status/single-node && echo 'SUCCESSFUL'
          > build_status/build_status/single-node/final_status
        haltOnFailure: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
        alwaysRun: true
  multiple-nodes:
    worker:
      type: openstack
      path: eve/workers/openstack-multiple-nodes
      image: CentOS-7-x86_64-GenericCloud-1809.qcow2
      flavor: m1.medium
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for multiple-nodes
        command: mkdir -p build_status/build_status/multiple-nodes && echo 'FAILED'
          > build_status/build_status/multiple-nodes/final_status
        haltOnFailure: true
    - Git:
        name: git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
    - ShellCommand:
        name: Install SSH keys and report connection info
        command: "mkdir -p ~/.ssh; echo \"%(secret:ssh_pub_keys)s\" >> ~/.ssh/authorized_keys;\
          \ IP=$( ip -f inet addr show eth0 | sed -En 's/^.*inet ([0-9.]+).*$/\\1/p'\
          \ ); echo \"Connect to this worker using:\n    ssh eve@$IP\""
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for multiple-nodes
        command: mkdir -p build_status/build_status/multiple-nodes && echo 'SUCCESSFUL'
          > build_status/build_status/multiple-nodes/final_status
        haltOnFailure: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
        alwaysRun: true
